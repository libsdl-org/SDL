name: Build (MSVC)

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  Build:
    name: ${{ matrix.platform.name }}
    runs-on: windows-latest

    strategy:
      fail-fast: false
      matrix:
        platform:
        - { name: 'Windows (x64)',                vcvars: 'x64',        artifact: 'SDL-VC-x64',         project: 'VisualC/SDL.sln', projectflags: '/p:Platform=x64', }
        - { name: 'Windows (x86)',                vcvars: 'x64_x86',    artifact: 'SDL-VC-x86',         project: 'VisualC/SDL.sln', projectflags: '/p:Platform=Win32', }
        - { name: 'Windows (clang-cl x64)',       vcvars: 'x64',        artifact: 'SDL-clang-cl-x64',   cmake-args: '-DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl', cppflags: '/clang:-m64', ldflags: '/MACHINE:X64',  }
        - { name: 'Windows (clang-cl x86)',       vcvars: 'x86',        artifact: 'SDL-clang-cl-x86',   cmake-args: '-DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl', cppflags: '/clang:-m32', ldflags: '/MACHINE:X86', }
        - { name: 'Windows (ARM)',                vcvars: 'x64_arm',    artifact: 'SDL-VC-arm32',       notests: true, }
        - { name: 'Windows (ARM64)',              vcvars: 'x64_arm64',  artifact: 'SDL-VC-arm64',       notests: true, }
        - { name: 'UWP (x64)',                    vcvars: 'x64',        artifact: 'SDL-VC-UWP',         notests: true, cmake-args: '-DCMAKE_SYSTEM_NAME=WindowsStore -DCMAKE_SYSTEM_VERSION="10.0" -DSDL_TESTS=OFF',
            project: 'VisualC-WinRT/SDL-UWP.sln', projectflags: '/p:Platform=x64 /p:WindowsTargetPlatformVersion=10.0.17763.0', }

    steps:
    - uses: actions/checkout@v4
    - name: Set up ninja
      uses: ./.github/actions/setup-ninja
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.platform.vcvars }}
    - name: Set up libusb
      uses: ./.github/actions/setup-msvc-libusb-action
      if: ${{ matrix.platform.libusb-arch != '' }}
      id: libusb
      with:
        arch: ${{ matrix.platform.libusb-arch }}
    - name: Create CMake project using SDL as a subproject
      shell: python
      run: |
        import os
        import textwrap
        srcdir = r"${{ github.workspace }}".replace("\\", "/")
        builddir = f"{ srcdir }/build"
        os.makedirs(builddir)
        cmakelists_txt = textwrap.dedent(f"""\
          # MSVC runtime library flags are selected by an abstraction
          set(CMAKE_POLICY_DEFAULT_CMP0091 "NEW" CACHE STRING "MSVC runtime library flags are selected by an abstraction")
          # MSVC debug information format flags are selected by an abstraction
          set(CMAKE_POLICY_DEFAULT_CMP0141 "NEW" CACHE STRING "MSVC debug information format flags are selected by an abstraction")
          cmake_minimum_required(VERSION 3.0...3.25)
          project(sdl_user)
          # Always build .PDB symbol file
          set(CMAKE_MSVC_DEBUG_INFORMATION_FORMAT "ProgramDatabase" CACHE STRING "MSVC debug information format" FORCE)
          set(CMAKE_EXE_LINKER_FLAGS "-DEBUG" CACHE STRING "Linker flags for executables" FORCE)
          set(CMAKE_SHARED_LINKER_FLAGS "-DEBUG" CACHE STRING "Linker flag for shared libraries" FORCE)
          if(WINDOWS_STORE) # WINDOWS_STORE is available AFTER project()
            # UWP only supports dynamic runtime
            set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>DLL" CACHE STRING "MSVC runtime libary" FORCE)
          else()
            # Use static runtime library
            set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>" CACHE STRING "MSVC runtime libary" FORCE)
          endif()
          enable_testing()
          add_subdirectory("{ srcdir }" SDL)
        """)
        print(cmakelists_txt)
        with open(f"{ builddir }/CMakeLists.txt", "w") as f:
          f.write(cmakelists_txt)
    - name: Configure (CMake)
      run: cmake -S build -B build -GNinja `
        -Wdeprecated -Wdev -Werror `
        -DCMAKE_BUILD_TYPE=Release `
        -DSDL_WERROR=ON `
        -DSDL_SHARED=ON `
        -DSDL_STATIC=ON `
        -DSDL_TESTS=ON `
        -DCMAKE_C_FLAGS="${{ matrix.platform.cppflags }}" `
        -DCMAKE_CXX_FLAGS="${{ matrix.platform.cppflags }}" `
        -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.platform.ldflags }}" `
        -DCMAKE_SHARED_LINKER_FLAGS="${{ matrix.platform.ldflags }}" `
        -DCMAKE_STATIC_LINKER_FLAGS="${{ matrix.platform.ldflags }}" `
        -DSDL_INSTALL_TESTS=ON `
        -DSDL_VENDOR_INFO="Github Workflow" `
        -DSDL_DISABLE_INSTALL=OFF `
        -DSDL_DISABLE_INSTALL_CPACK=OFF `
        -DSDL_DISABLE_INSTALL_DOCS=OFF `
        -DSDLTEST_PROCDUMP=ON `
        -DLibUSB_ROOT="${{ steps.libusb.outputs.root }}" `
        ${{ matrix.platform.cmake-args }} `
        -DCMAKE_INSTALL_PREFIX=prefix
    - name: Build (CMake)
      id: build
      run: |
        cmake --build build/ --config Release --verbose --parallel
    - name: Run build-time tests
      id: tests
      if: ${{ !matrix.platform.notests }}
      run: |
        $env:SDL_TESTS_QUICK=1
        ctest -VV --test-dir build/ -C Release -j2
    - name: Install (CMake)
      run: |
        echo "SDL3_DIR=$Env:GITHUB_WORKSPACE/prefix" >> $Env:GITHUB_ENV
        cmake --install build/
    - name: Package (CPack)
      if: ${{ always() && steps.build.outcome == 'success' }}
      run: |
        cmake --build build/ --config Release --target package
    - name: Verify CMake configuration files
      run: |
        cmake -S cmake/test -B cmake_config_build -GNinja `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_PREFIX_PATH=${{ env.SDL3_DIR }} `
          -DCMAKE_C_FLAGS="${{ matrix.platform.cppflags }}" `
          -DCMAKE_CXX_FLAGS="${{ matrix.platform.cppflags }}" `
          -DCMAKE_EXE_LINKER_FLAGS="${{ matrix.platform.ldflags }}" `
          -DCMAKE_SHARED_LINKER_FLAGS="${{ matrix.platform.ldflags }}" `
          -DCMAKE_STATIC_LINKER_FLAGS="${{ matrix.platform.ldflags }}" `
          ${{ matrix.platform.cmake-args }}
        cmake --build cmake_config_build --config Release
    - name: Add msbuild to PATH
      if: ${{ matrix.platform.project != '' }}
      uses: microsoft/setup-msbuild@v2
    - name: Build msbuild
      if: ${{ matrix.platform.project != '' }}
      run: msbuild ${{ matrix.platform.project }} /m /p:BuildInParallel=true /p:Configuration=Release ${{ matrix.platform.projectflags }}
    - uses: actions/upload-artifact@v4
      if: ${{ always() && steps.tests.outcome == 'failure' }}
      with:
        if-no-files-found: ignore
        name: '${{ matrix.platform.artifact }}-minidumps'
        path: build/**/*.dmp
    - uses: actions/upload-artifact@v4
      if: ${{ always() && steps.build.outcome == 'success' }}
      with:
        if-no-files-found: error
        name: ${{ matrix.platform.artifact }}
        path: build/dist/SDL3*
